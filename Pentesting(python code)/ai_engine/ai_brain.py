from ai_llm import ask_ai_brain
from ai_memory import record_result, is_successful
from tool_launcher import launch_exploit
from scanners.interpret_web import interpret_web
from scanners.interpret_network import interpret_network

class AIBrain:
    def __init__(self, domain):
        self.domain = domain
        self.history = []

    def exploit_from_scan(self, scan_output):
        findings = interpret_web(scan_output) if self.domain == "web" else interpret_network(scan_output)

        for finding in findings:
            try:
                ai_tool_config = ask_ai_brain(finding)  # This now returns a dict
                print(f"[AI] Tool recommendation: {ai_tool_config}")

                # Run the tool using new logic (download, exec, cleanup)
                result = launch_exploit(ai_tool_config)

                # Persist result in DB or memory
                record_result(finding["type"], ai_tool_config.get("tool", "unknown"), is_successful(result))
                self.history.append((finding, ai_tool_config, result))

            except Exception as e:
                print(f"[!] Error processing finding {finding}: {e}")

    def generate_summary(self):
        lines = [f"# Exploitation Report for {self.domain.capitalize()} Domain\n"]
        if not self.history:
            lines.append("_No findings to report._")
            return "\n".join(lines)

        for idx, (finding, action, result) in enumerate(self.history, 1):
            lines.append(f"## Finding {idx}")
            lines.append(f"- **Type:** {finding.get('type')}")
            lines.append(f"- **Tool Used:** {action.get('tool')}")
            lines.append(f"- **Target:** {action.get('url') or action.get('target') or action.get('target_ip')}")

            if isinstance(result, dict):
                if 'vulnerable' in result:
                    lines.append(f"- **Vulnerable:** {result['vulnerable']}")
                elif 'error' in result:
                    lines.append(f"- **Error:** {result['error']}")
            else:
                lines.append(f"- **Output:**\n```\n{result}\n```")

            lines.append("")
        return "\n".join(lines)
