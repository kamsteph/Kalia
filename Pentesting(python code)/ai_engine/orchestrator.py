from flask import jsonify, request
from networkPentest.main import app
from networkPentest.pentest_report import (
    run_network_vuln_scan,
    run_network_attack_phase
)
from webPentest.web_pentest_report import (
    run_web_vuln_scan,
    run_web_attack_phase
)


# =========================
# üõ°Ô∏è WEB VULNERABILITY SCAN
# =========================
@app.route("/start-web-vuln-scan", methods=["POST"])
def start_web_vuln_scan():
    data = request.json
    web_url = data.get("url")
    social_urls = data.get("social_urls", [])
    export_format = data.get("export_format", "md")

    if not web_url:
        return jsonify({"error": "Missing web URL"}), 400

    result = run_web_vuln_scan(web_url, export_format, social_urls=social_urls)
    return jsonify(result)


# ================================
# ‚öîÔ∏è WEB ATTACK PHASE (AFTER SCAN)
# ================================
@app.route("/start-web-attack", methods=["POST"])
def start_web_attack():
    data = request.json
    vuln_scan_data = data.get("vuln_scan_data")
    can_proceed = data.get("can_proceed", False)

    if not vuln_scan_data:
        return jsonify({"error": "Missing vulnerability scan data"}), 400

    result = run_web_attack_phase(vuln_scan_data, can_proceed)
    return jsonify(result)


# =============================
# üõ°Ô∏è NETWORK VULNERABILITY SCAN
# =============================
@app.route("/start-network-vuln-scan", methods=["POST"])
def start_network_vuln_scan():
    data = request.json
    ip = data.get("ip")
    export_format = data.get("export_format", "md")

    if not ip:
        return jsonify({"error": "Missing IP address"}), 400

    result = run_network_vuln_scan(ip, export_format)
    return jsonify(result)


# ===============================
# ‚öîÔ∏è NETWORK ATTACK PHASE (AFTER SCAN)
# ===============================
@app.route("/start-network-attack", methods=["POST"])
def start_network_attack():
    data = request.json
    vuln_scan_data = data.get("vuln_scan_data")
    can_proceed = data.get("can_proceed", False)

    if not vuln_scan_data:
        return jsonify({"error": "Missing vulnerability scan data"}), 400

    result = run_network_attack_phase(vuln_scan_data, can_proceed)
    return jsonify(result)
