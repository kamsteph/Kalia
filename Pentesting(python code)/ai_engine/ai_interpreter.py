# This function parses a web vulnerability scan report (as a plain text file)
# and extracts known findings like SQL injection and XSS from its contents.
def interpret_web(scan_file):
    findings = []  # List to store all extracted vulnerability findings

    # Open and read the scan report file
    with open(scan_file, 'r') as f:
        content = f.read()

        # If "SQL injection" is mentioned in the scan, assume a SQLi vulnerability was found
        if "SQL injection" in content:
            findings.append({
                "type": "sqli",             # Type of vulnerability
                "param": "id",              # Example vulnerable parameter
                "url": "/product?id=1"      # Example vulnerable URL
            })

        # If "Reflected XSS" is mentioned in the scan, record an XSS finding
        if "Reflected XSS" in content:
            findings.append({
                "type": "xss",              # Type of vulnerability
                "url": "/search?query="     # Example vulnerable endpoint
            })

    return findings  # Return the list of detected vulnerabilities


# This function analyzes a network scan output file (like Nmap XML or plain text)
# and checks for specific vulnerabilities such as open SMB ports.
def interpret_network(xml_file):
    # List to store any network-related findings
    findings = []

    # Open and read the network scan result (assumes plaintext for now)
    # A more complete version would parse XML using xmltodict or ElementTree
    if "445/tcp open" in open(xml_file).read():
        findings.append({
            "type": "smb",        # Indicates an SMB service was found
            "version": "1.0"      # Placeholder for SMB version (could be extracted from a real scan)
        })

    return findings  # Return any detected network vulnerabilities
