import openai

import openai
import json

def ask_ai_brain(finding):
    prompt = (
        f"A vulnerability of type '{finding['type']}' was found at '{finding['url']}'.\n"
        "Please provide the best exploitation method including:\n"
        "- tool name\n"
        "- official or trusted download URL or git clone command\n"
        "- exact command line to run the tool for this target (use {target} placeholder for URL/IP)\n"
        "- cleanup instructions (folders/files to delete after use)\n\n"
        "Output the response as a JSON object with these keys: tool, download_cmd, run_cmd, cleanup_paths.\n"
        "Example:\n"
        "{\n"
        '  "tool": "nikto",\n'
        '  "download_cmd": "git clone https://github.com/sullo/nikto.git",\n'
        '  "run_cmd": "perl nikto/nikto.pl -h {target}",\n'
        '  "cleanup_paths": ["nikto"]\n'
        "}\n"
    )

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0,
        max_tokens=500,
    )

    content = response['choices'][0]['message']['content']

    try:
        # Attempt to parse JSON from response
        data = json.loads(content)
    except json.JSONDecodeError:
        print("[!] Failed to parse AI response as JSON. Response:")
        print(content)
        return None

    return data

# def ask_ai_brain(finding):
#     prompt = f"A vulnerability of type {finding['type']} was found at {finding['url']}. What would be the best exploitation method?"
#     response = openai.ChatCompletion.create(
#         model="gpt-4",
#         messages=[{"role": "user", "content": prompt}]
#     )
#     return response['choices'][0]['message']['content']
#
# def parse_tool_name(ai_response):
#     known_tools = ["sqlmap", "xss_payload", "exploit_smb", "burp", "zap"]
#     for tool in known_tools:
#         if tool in ai_response.lower():
#             return tool
#     return "unknown"
