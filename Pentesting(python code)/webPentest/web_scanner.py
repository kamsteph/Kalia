#
# web_scanner_zap.py
# from zapv2 import ZAPv2
# import time
#
# ZAP_API_KEY = "your-zap-api-key"
# ZAP_PROXY = 'http://127.0.0.1:8888'  # Default ZAP proxy
#
# def run_web_scan(target):
#     try:
#         zap = ZAPv2(apikey=ZAP_API_KEY, proxies={'http': ZAP_PROXY, 'https': ZAP_PROXY})
#
#         print(f"[ZAP] Accessing target: {target}")
#         zap.urlopen(target)
#         time.sleep(2)
#
#         print("[ZAP] Starting spider...")
#         zap.spider.scan(target)
#         while int(zap.spider.status()) < 100:
#             time.sleep(1)
#
#         print("[ZAP] Starting active scan...")
#         zap.ascan.scan(target)
#         while int(zap.ascan.status()) < 100:
#             time.sleep(1)
#
#         print("[ZAP] Scan complete.")
#         alerts = zap.core.alerts(baseurl=target)
#         print(f"[DEBUG] Total alerts found: {len(alerts)}")
#
#         formatted_results = ""
#         for alert in alerts:
#             formatted_results += f"""
# [!] {alert.get('alert')}
# - Risk: {alert.get('risk')}
# - URL: {alert.get('url')}
# - Description: {alert.get('description', 'N/A')}
# - Solution: {alert.get('solution', 'N/A')}
# ---
# """
#         print(f"[DEBUG] Total alerts found: {len(alerts)}")
#         return formatted_results.strip()
#
#     except Exception as e:
#         print(f"[ERROR] Exception during ZAP scan: {e}")
#         return ""

import subprocess
import os

def run_web_scan(url):
    print("[+] Running Wapiti scan...")
    output_dir = "wapiti_output"
    os.makedirs(output_dir, exist_ok=True)

    # Run wapiti (must be installed: pip install wapiti3 or install via apt)
    subprocess.run(["wapiti", "-u", url, "-f", "json", "-o", os.path.join(output_dir, "report.json")])

    # Read and return the vulnerability summary
    report_path = os.path.join(output_dir, "report.json")
    if os.path.exists(report_path):
        with open(report_path, "r", encoding="utf-8") as f:
            return f.read()
    else:
        return "No report generated. Check Wapiti installation."
