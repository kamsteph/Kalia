# web_osint.py
import requests
import socket
import dns.resolver
import shodan
from urllib.parse import urlparse
import os

SHODAN_API_KEY = os.getenv("SHODAN_API_KEY")  # Make sure this is set

def dns_lookup(domain):
    results = {}
    try:
        results['A'] = [r.address for r in dns.resolver.resolve(domain, 'A')]
        results['MX'] = [str(r.exchange) for r in dns.resolver.resolve(domain, 'MX')]
        results['NS'] = [str(r.target) for r in dns.resolver.resolve(domain, 'NS')]
    except Exception as e:
        results['error'] = str(e)
    return results

def shodan_lookup(ip):
    results = {}
    if not SHODAN_API_KEY:
        return {"error": "SHODAN_API_KEY not set"}
    try:
        api = shodan.Shodan(SHODAN_API_KEY)
        host = api.host(ip)
        results = {
            "ip": host["ip_str"],
            "org": host.get("org", "n/a"),
            "os": host.get("os", "n/a"),
            "ports": host.get("ports", []),
            "vulns": host.get("vulns", []),
        }
    except Exception as e:
        results["error"] = str(e)
    return results

# --- MAIN TARGET OSINT ---
def gather_main_osint_info(url):
    print(f"[OSINT] Gathering headers/DNS/Shodan for: {url}")
    try:
        headers = requests.get(url, timeout=5).headers
    except:
        headers = {}

    # DNS lookup
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    dns_info = dns_lookup(domain)

    # Resolve IP from domain
    try:
        ip = socket.gethostbyname(domain)
    except:
        ip = None

    # Shodan lookup
    shodan_info = shodan_lookup(ip) if ip else {"error": "IP resolution failed"}

    return {
        "headers": dict(headers),
        "dns": dns_info,
        "shodan": shodan_info,
        "ip": ip
    }

# --- SOCIAL MEDIA OSINT ---
def gather_social_osint_info(social_urls):
    results = []
    for url in social_urls:
        print(f"[SOCIAL-OSINT] Checking: {url}")
        try:
            response = requests.get(url, timeout=5)
            results.append((url, response.status_code))
        except:
            results.append((url, 'unreachable'))
    return results

# def gather_osint_info(url):
#     print("[+] Gathering basic OSINT info...")
#     try:
#         headers = requests.get(url).headers
#         header_info = "\n".join([f"{k}: {v}" for k, v in headers.items()])
#         return f"HTTP Headers:\n{header_info}"
#     except Exception as e:
#         return f"Failed to gather OSINT info: {e}"
