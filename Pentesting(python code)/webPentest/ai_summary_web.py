import os
import openai
import textwrap
import traceback

def generate_web_ai_summary(scan_text, osint=""):
    try:
        openai.api_key = os.getenv("GROQ_API_KEY")
        openai.base_url = "https://api.groq.com/openai/v1/"

        if not openai.api_key:
            raise ValueError("GROQ_API_KEY environment variable not set.")

        print("[+] Pr√©paration du texte pour envoi...")

        # üîß Sanitize inputs
        scan_text = str(scan_text).strip()
        osint = str(osint).strip()

        full_text = f"Web Vulnerability Scan:\n{scan_text}\n\nOSINT Info:\n{osint}"
        MAX_CHUNK_SIZE = 6000
        chunks = textwrap.wrap(full_text, MAX_CHUNK_SIZE, break_long_words=False, replace_whitespace=False)

        print(f"[+] {len(chunks)} segment(s) g√©n√©r√©(s) pour traitement.")

        all_responses = []

        for idx, chunk in enumerate(chunks):
            print(f"[+]  Envoi du segment {idx + 1}/{len(chunks)} √† Groq...")

            prompt = f"""
You are a cybersecurity analyst.

Here is part {idx + 1} of a web vulnerability scan:

{chunk}

Please analyze this part. For each segment, do:
1. Identify key vulnerabilities.
2. List potential risks.
3. Recommend mitigations.

At the end, I will compile all parts into a full report.
Respond clearly and concisely.
"""

            try:
                response = openai.chat.completions.create(
                    model="llama3-70b-8192",
                    messages=[{"role": "user", "content": prompt}],
                )
                reply = response.choices[0].message.content.strip()
                all_responses.append(f"--- Segment {idx + 1} ---\n{reply}\n")

            except Exception as segment_error:
                print(f"[‚ùå] Erreur pendant l'analyse du segment {idx + 1}: {segment_error}")
                traceback.print_exc()
                all_responses.append(f"--- Segment {idx + 1} ---\n[ERROR]: {segment_error}\n")

        print("[+] ‚úÖ Tous les segments ont √©t√© analys√©s.")
        final_report = "\n".join(all_responses)
        return final_report

    except Exception as general_error:
        print("[üî•] ERREUR G√âN√âRALE dans generate_web_ai_summary:", general_error)
        traceback.print_exc()
        return f"[GLOBAL ERROR]: {general_error}"
