# import os
# from flask import Flask
from dotenv import load_dotenv
import uvicorn
from fastapi.middleware.cors import CORSMiddleware
from fastapi import FastAPI, HTTPException
import os
from pydantic import BaseModel
from typing import List, Optional
#from web_pentest_report import scan_and_report
import asyncio

load_dotenv()
#main = Flask(__name__)
groq_key = os.getenv("GROQ_API_KEY")
print("DEBUG: Groq key is:", os.getenv("GROQ_API_KEY"))
if not groq_key:
    raise ValueError("GROQ_API_KEY not set")

app = FastAPI(title="Web Pentest API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  #Use ["http://localhost:PORT"] in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
#
# class ScanRequest(BaseModel):
#     url: List[str]
#     social: Optional[List[str]] = None
#     export: str = "both"
#
# @app.post("/scan")
# async def run_scan(request: ScanRequest):
#     async def run_for_url(url):
#         loop = asyncio.get_event_loop()
#         await loop.run_in_executor(
#             None,
#             lambda: scan_and_report(url, request.export, request.social)
#         )
#         return {"url": url, "status": "completed"}
#
#     try:
#         results = await asyncio.gather(*(run_for_url(u) for u in request.url))
#         return {"results": results}
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))
#
# if __name__ == "__main__":
#     # ðŸ‘‡ This launches uvicorn when you click Run
#     uvicorn.run("main:app", host="0.0.0.0", port=5000, reload=True)