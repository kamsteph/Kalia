import argparse
from run_nmap import run_nmap
from parse_scan import parse_nmap_output
from ai_summary import generate_ai_summary
#from export_report import export_to_markdown, export_to_pdf
from webPentest.export_report import export_to_pdf,export_to_markdown
import sys
import os

from webPentest.ai_summary_web import generate_web_ai_summary

# Add path to ai_engine (relative to project root)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
AI_ENGINE_PATH = os.path.join(BASE_DIR, "ai_engine")
sys.path.append(AI_ENGINE_PATH)

# Now import AI modules
from ai_engine.ai_brain import AIBrain

def run_network_vuln_scan(ip, export_format="md"):
    run_nmap(ip)
    results = parse_nmap_output("scan_output.xml")

    export_to_pdf(results,'C:\\Users\\2331025\\Pentesting(python code)\\Report(Vuln_Scanning(simplified+complex))')

    summary = generate_ai_summary(results)

    export_to_pdf(summary,'C:\\Users\\2331025\\Pentesting(python code)\\Report(Vuln_Scanning(simplified+complex))','web','simplified')

    return {
        "ip": ip,
        "vulnerabilities": results,
        "summary": summary,
        "export_format": export_format,
    }


def run_network_attack_phase(vuln_scan_data, can_proceed=False):
    ip = vuln_scan_data["ip"]
    results = vuln_scan_data["vulnerabilities"]
    summary = vuln_scan_data["summary"]
    export_format = vuln_scan_data["export_format"]

    if not can_proceed:
        print("[!] User declined to proceed with pentest attack after scanning.")
        return {
            "ip": ip,
            "attack_performed": False,
            "summary": summary,
        }

    exported_files = []
    if export_format in ["md", "both"]:
        md_file = export_to_markdown(summary,'C:\\Users\\2331025\\Pentesting(python code)\\Exploit_Report', p_type="network")
        exported_files.append(md_file)
    if export_format in ["pdf", "both"]:
        pdf_file = export_to_pdf(summary,'C:\\Users\\2331025\\Pentesting(python code)\\Exploit_Report','network')
        exported_files.append(pdf_file)

    ai = AIBrain(domain="network")
    ai.exploit_from_scan(results)
    ai_summary = ai.generate_summary()

    return {
        "ip": ip,
        "attack_performed": True,
        "summary": summary,
        "ai_summary": ai_summary,
        "exported_files": exported_files,
        "raw_results": results,
    }

# def main():
#     parser = argparse.ArgumentParser(description="Run Nmap, parse it, and get an AI summary.")
#     parser.add_argument("--target", required=True, help="Target IP or hostname")
#     parser.add_argument("--export", choices=["md"], default="md", help="Export format")
#     # parser.add_argument("--api-key", required=True, help="OpenAI API key")  # You can safely comment this
#
#     args = parser.parse_args()
#
#     run_nmap(args.target)
#     results = parse_nmap_output("scan_output.xml")
#     ai = AIBrain(domain="network")
#     ai.exploit_from_scan(results)
#     summary = generate_ai_summary(results)  # No need to pass API key
#     export_to_markdown(summary)
#
# if __name__ == "__main__":
#     main()
