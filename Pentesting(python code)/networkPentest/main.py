import os
from typing import Optional

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from starlette.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
# from run_nmap import run_nmap
# from parse_scan import parse_nmap_output
# from ai_summary import generate_ai_summary
# from export_report import export_to_markdown, export_to_pdf, export_report

load_dotenv()
#main = Flask(__name__)
groq_key = os.getenv("GROQ_API_KEY")
print("DEBUG: Groq key is:", os.getenv("GROQ_API_KEY"))
if not groq_key:
    raise ValueError("GROQ_API_KEY not set")

app = FastAPI(title="Nmap AI Web Scanner")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],  # Includes OPTIONS, POST, GET, etc.
    allow_headers=["*"],  # Required for Content-Type, etc.
)
# class ScanRequest(BaseModel):
#     target: str
#     export: str
# class ScanResponse(BaseModel):
#     markdown_report: Optional[str] = None
#     pdf_path: Optional[str] = None
#     md_path: Optional[str] = None
#
# @app.post("/scan", response_model=ScanResponse)
# async def scan_target(request: ScanRequest):
#     try:
#         run_nmap(request.target)
#         results = parse_nmap_output("scan_output.xml")
#         summary = generate_ai_summary(results)
#
#         md_path = None
#         pdf_path = None
#
#         if request.export in ["md", "both"]:
#             md_path = export_to_markdown(summary)
#
#         if request.export in ["pdf", "both"]:
#             pdf_path = export_to_pdf(summary)
#
#         return ScanResponse(
#             markdown_report=summary if request.export in ["md", "both"] else None,
#             md_path=md_path,
#             pdf_path=pdf_path
#         )
#
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))
