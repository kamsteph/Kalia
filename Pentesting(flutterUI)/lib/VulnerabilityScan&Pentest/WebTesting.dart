import 'package:flutter/material.dart';
import '../CustomReusableClasses/PentestUtils.dart';
import '../PentestingAPI/CombinedPentestAPI.dart';
import '../PentestingAPI/WebPentestingAPI.dart';
import 'package:google_fonts/google_fonts.dart';

class WebScanPage extends StatefulWidget {
  const WebScanPage({super.key});

  @override
  State<WebScanPage> createState() => _WebScanPageState();
}

class _WebScanPageState extends State<WebScanPage> {
  final List<TextEditingController> _mainUrlControllers = [TextEditingController()];
  final List<TextEditingController> _socialMediaControllers = [TextEditingController()];

  String _scanResult = "";
  bool _isLoading = false;
  bool _exportBoth = false;
  String _selectedFormat = 'pdf';
  bool _cancelled = false;
  bool _attackStarted = false;
  bool _showAttackPhase = false;
  int _countdown = 15;
  String _allResults = "";

  Future<void> _startScan() async {
    final urls = _mainUrlControllers.map((c) => c.text.trim()).where((url) => url.isNotEmpty).toList();
    final mediaUrls = _socialMediaControllers.map((c) => c.text.trim()).where((url) => url.isNotEmpty).toList();
    final reportFormat = _exportBoth ? 'both' : _selectedFormat;

    if (urls.isEmpty) {
      setState(() => _scanResult = "Please enter at least one main URL of your website.");
      return;
    }

    setState(() {
      _isLoading = true;
      _scanResult = "";
      _cancelled = false;
      _attackStarted = false;
      _showAttackPhase = false;
      _allResults = "";
    });

    try {
      for (var url in urls) {
        final result = await WebScanAPI.runScan(url, social: '', report: reportFormat);
        _allResults += "\nüì° Scan for $url:\n$result\n";
      }

      for (var mediaUrl in mediaUrls) {
        final result = await WebScanAPI.runScan('', social: mediaUrl, report: reportFormat);
        _allResults += "\nüì° Scan for $mediaUrl:\n$result\n";
      }
    } catch (e) {
      setState(() => _scanResult = "Erreur : $e");
      return;
    } finally {
      setState(() => _isLoading = false);
    }

    setState(() => _showAttackPhase = true);

    final userConfirmed = await PentestUtils.showConfirmationDialog(context);
    if (!userConfirmed) {
      setState(() {
        _showAttackPhase = false;
        _scanResult = "Attack phase cancelled by user.";
      });
      return;
    }

    await PentestUtils.startCountdown(
      seconds: 15,
      isCancelled: () => _cancelled,
      onCancelCheck: () {
        setState(() {
          _showAttackPhase = false;
          _scanResult = "Attack cancelled by user.";
        });
      },
      onTick: (remaining) {
        setState(() => _countdown = remaining);
      },
      onComplete: () async {
        if (!_attackStarted) {
          _attackStarted = true;
          setState(() => _showAttackPhase = false);
          await CombinedScanAPI.pentestAttack(
              _allResults, true, 'http://127.0.0.1:8888:/start-web-pentest');
          setState(() => _scanResult = "Attack phase completed.");
        }
      },
      isAttackStarted: () => _attackStarted,
      markAttackStarted: () => _attackStarted = true,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text("Web Pentest", style: GoogleFonts.playfairDisplay(fontSize: 25, fontWeight: FontWeight.w600)),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: SizedBox(
                    width: 60,
                    height: 60,
                    child: Image.asset("assets/3d-shape-glowing-with-bright-holographic-colors.jpg", fit: BoxFit.cover),
                  ),
                ),
                const SizedBox(width: 15),
                Text("Kalia", style: GoogleFonts.openSans(fontSize: 30)),
              ],
            ),
            const SizedBox(height: 40),
            Text("Enter the url of the company's website", style: TextStyle(fontSize: 16)),
            const SizedBox(height: 10),

            ..._buildDynamicFields(_mainUrlControllers, 'Main URL', Icons.document_scanner, isMain: true),
            const SizedBox(height: 10),
            Text("Add social media urls (optional)", style: TextStyle(fontSize: 16)),
            const SizedBox(height: 10),
            ..._buildDynamicFields(_socialMediaControllers, 'Social Media URL', Icons.perm_media),

            const SizedBox(height: 20),
            Center(child: Text("Choose which format you want to receive your report", style: TextStyle(fontSize: 16))),
            const SizedBox(height: 10),

            SwitchListTile(
              value: _exportBoth,
              onChanged: (bool value) {
                setState(() => _exportBoth = value);
              },
              title: Text("Exporter en PDF + Markdown", style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              subtitle: Text("(D√©sactivez pour choisir un seul format)",
                  style: GoogleFonts.openSans(fontSize: 10, fontWeight: FontWeight.w600)),
            ),
            if (!_exportBoth) ...[
              RadioListTile<String>(
                value: 'pdf',
                groupValue: _selectedFormat,
                onChanged: (value) => setState(() => _selectedFormat = value!),
                title: Text("Exporter uniquement en PDF",
                    style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              ),
              RadioListTile<String>(
                value: 'md',
                groupValue: _selectedFormat,
                onChanged: (value) => setState(() => _selectedFormat = value!),
                title: Text("Exporter uniquement en Markdown",
                    style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              ),
            ],

            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isLoading ? null : _startScan,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green.shade600,
                minimumSize: const Size(200, 50),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
              ),
              child: Text("Launch Pentest", style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
            ),

            const SizedBox(height: 40),
            if (_isLoading) const CircularProgressIndicator(),

            if (!_isLoading && _scanResult.isNotEmpty) ...[
              const Divider(height: 30, thickness: 1.5),
              Text("R√©sultat du scan :", style: GoogleFonts.poppins(fontWeight: FontWeight.bold)),
              const SizedBox(height: 10),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  borderRadius: BorderRadius.circular(10),
                  color: Colors.grey.shade100,
                ),
                child: Text(_scanResult, style: GoogleFonts.openSans(fontSize: 14)),
              ),
            ],

            if (_showAttackPhase) ...[
              const SizedBox(height: 30),
              Text("‚öîÔ∏è Pentest Attack and Exploitation", style: GoogleFonts.poppins(fontSize: 18, fontWeight: FontWeight.bold)),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _cancelled = true;
                        _showAttackPhase = false;
                        _scanResult = "Attack cancelled by user.";
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.redAccent,
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    ),
                    child: Text("Cancel ($_countdown)", style: const TextStyle(color: Colors.white)),
                  ),
                  ElevatedButton(
                    onPressed: () async {
                      setState(() {
                        _attackStarted = true;
                        _showAttackPhase = false;
                      });
                      await CombinedScanAPI.pentestAttack(
                          _allResults, true, 'http://127.0.0.1:8888:/start-web-pentest');
                      setState(() {
                        _scanResult = "Attack phase completed.";
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    ),
                    child: const Text("Continue", style: TextStyle(color: Colors.white)),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  List<Widget> _buildDynamicFields(List<TextEditingController> controllers, String label, IconData icon,
      {bool isMain = false}) {
    return List.generate(controllers.length, (index) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Column(
          children: [
            TextFormField(
              controller: controllers[index],
              decoration: InputDecoration(
                prefixIcon: Icon(icon, size: 20, color: Colors.blue),
                labelText: '$label ${index + 1}',
                labelStyle: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600),
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(30)),
              ),
            ),
            if (index == controllers.length - 1)
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: () {
                    setState(() => controllers.add(TextEditingController()));
                  },
                  child: Text("‚ûï Add another ${label.toLowerCase()}"),
                ),
              ),
            if (controllers.length > 1)
              IconButton(
                icon: const Icon(Icons.delete, color: Colors.red),
                onPressed: () => setState(() => controllers.removeAt(index)),
              ),
          ],
        ),
      );
    });
  }
}
