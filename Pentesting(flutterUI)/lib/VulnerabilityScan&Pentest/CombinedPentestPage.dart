import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

import '../PentestingAPI/NetworkPentestingAPI.dart';
import '../PentestingAPI/WebPentestingAPI.dart';

class CombinedScanPage extends StatefulWidget {
  const CombinedScanPage({super.key});

  @override
  State<CombinedScanPage> createState() => _CombinedScanPageState();
}

class _CombinedScanPageState extends State<CombinedScanPage> {
  // Network inputs
  final List<TextEditingController> _ipControllers = [TextEditingController()];

  // Web inputs
  final List<TextEditingController> _mainUrlControllers = [TextEditingController()];
  final List<TextEditingController> _socialMediaControllers = [TextEditingController()];

  // UI state
  bool _isLoading = false;
  bool _exportBoth = false;
  String _selectedFormat = 'pdf';

  String _scanResult = "";

  Future<void> _startScan() async {
    final ipTargets = _ipControllers.map((c) => c.text.trim()).where((ip) => ip.isNotEmpty).toList();
    final webTargets = _mainUrlControllers.map((c) => c.text.trim()).where((url) => url.isNotEmpty).toList();
    final socialTargets = _socialMediaControllers.map((c) => c.text.trim()).where((url) => url.isNotEmpty).toList();

    if (ipTargets.isEmpty && webTargets.isEmpty) {
      setState(() {
        _scanResult = "Please enter at least one Network IP or Web URL to scan.";
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _scanResult = "";
    });

    final reportFormat = _exportBoth ? 'both' : _selectedFormat;

    String combinedResults = "";

    try {
      // Run network scans sequentially (can be adapted to parallel if desired)
      for (var ip in ipTargets) {
        final result = await NetworkScanAPI.runScan(ip, reportFormat);
        combinedResults += "\nüì° Network scan for $ip:\n$result\n";
      }

      // Run web scans sequentially
      for (var url in webTargets) {
        final result = await WebScanAPI.runScan(url, social: '', report: reportFormat);
        combinedResults += "\nüåê Web scan for $url:\n$result\n";
      }

      // Run social media scans (optional)
      for (var socialUrl in socialTargets) {
        final result = await WebScanAPI.runScan('', social: socialUrl, report: reportFormat);
        combinedResults += "\nüì± Social media scan for $socialUrl:\n$result\n";
      }
    } catch (e) {
      combinedResults += "\n‚ùå Error occurred during scanning: $e\n";
    }

    setState(() {
      _scanResult = combinedResults;
      _isLoading = false;
    });
  }

  Widget _buildTextFields(
      String title,
      List<TextEditingController> controllers,
      String prefixLabel,
      IconData icon,
      String addButtonText,
      ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title, style: GoogleFonts.poppins(fontSize: 18, fontWeight: FontWeight.w600)),
        const SizedBox(height: 10),
        ...List.generate(controllers.length, (index) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextFormField(
                  controller: controllers[index],
                  decoration: InputDecoration(
                    prefixIcon: Icon(icon, size: 20, color: Colors.blue),
                    labelText: '$prefixLabel ${index + 1}',
                    labelStyle: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                ),
                if (index == controllers.length - 1)
                  Align(
                    alignment: Alignment.centerRight,
                    child: TextButton(
                      onPressed: () {
                        setState(() {
                          controllers.add(TextEditingController());
                        });
                      },
                      child: Text(addButtonText),
                    ),
                  ),
              ],
            ),
          );
        }),
        const SizedBox(height: 20),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Combined Pentest Scanner", style: GoogleFonts.poppins(fontWeight: FontWeight.w700)),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildTextFields(
              "Enter target IP addresses (Network Scan):",
              _ipControllers,
              "Target IP",
              Icons.lan,
              "‚ûï Add another target IP",
            ),
            _buildTextFields(
              "Enter main web URLs (Web Scan):",
              _mainUrlControllers,
              "Main URL",
              Icons.web,
              "‚ûï Add another main URL",
            ),
            _buildTextFields(
              "Enter social media URLs (Optional, for info gathering):",
              _socialMediaControllers,
              "Social URL",
              Icons.perm_media,
              "‚ûï Add another social URL",
            ),

            const SizedBox(height: 10),

            Text("Choose report export format:", style: GoogleFonts.poppins(fontWeight: FontWeight.w600, fontSize: 18)),
            const SizedBox(height: 10),

            SwitchListTile(
              title: Text("Export both PDF & Markdown", style: GoogleFonts.openSans(fontWeight: FontWeight.w600)),
              subtitle: Text("(Turn off to choose a single format)", style: GoogleFonts.openSans(fontSize: 12)),
              value: _exportBoth,
              onChanged: (val) => setState(() => _exportBoth = val),
            ),

            if (!_exportBoth) ...[
              RadioListTile<String>(
                title: Text("PDF only", style: GoogleFonts.openSans(fontWeight: FontWeight.w600)),
                value: 'pdf',
                groupValue: _selectedFormat,
                onChanged: (val) => setState(() => _selectedFormat = val ?? 'pdf'),
              ),
              RadioListTile<String>(
                title: Text("Markdown only", style: GoogleFonts.openSans(fontWeight: FontWeight.w600)),
                value: 'md',
                groupValue: _selectedFormat,
                onChanged: (val) => setState(() => _selectedFormat = val ?? 'md'),
              ),
            ],

            const SizedBox(height: 20),

            Center(
              child: ElevatedButton(
                onPressed: _isLoading ? null : _startScan,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(200, 50),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                  backgroundColor: Colors.green.shade600,
                ),
                child: _isLoading
                    ? const CircularProgressIndicator(color: Colors.white)
                    : Text("Launch Combined Pentest", style: GoogleFonts.openSans(fontWeight: FontWeight.w700)),
              ),
            ),

            const SizedBox(height: 30),

            if (_scanResult.isNotEmpty)
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade400),
                  borderRadius: BorderRadius.circular(12),
                  color: Colors.grey.shade100,
                ),
                child: SelectableText(
                  _scanResult,
                  style: GoogleFonts.openSans(fontSize: 14),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
