import 'package:flutter/material.dart';
import '../CustomReusableClasses/PentestUtils.dart';
import '../PentestingAPI/CombinedPentestAPI.dart';
import '../PentestingAPI/NetworkPentestingAPI.dart';
import 'package:google_fonts/google_fonts.dart';

class NetworkScanPage extends StatefulWidget {
  const NetworkScanPage({super.key});

  @override
  State<NetworkScanPage> createState() => _NetworkScanPageState();
}

class _NetworkScanPageState extends State<NetworkScanPage> {
  double _scanProgress = 0.0;
  bool _scanDone = false;
  bool _showAttackPhase = false;
  int _countdown = 15;
  bool _cancelled = false;
  bool _attackStarted = false;
  String _allResults = "";

  final List<TextEditingController> _ipControllers = [TextEditingController()];
  String _scanResult = "";
  bool _isLoading = false;
  bool _exportBoth = false;
  String _selectedFormat = 'pdf';

  Future<void> _startScan() async {
    final targets = _ipControllers.map((c) => c.text.trim()).where((ip) => ip.isNotEmpty).toList();
    if (targets.isEmpty) {
      setState(() => _scanResult = "Please enter at least one target IP.");
      return;
    }

    setState(() {
      _isLoading = true;
      _scanDone = false;
      _showAttackPhase = false;
      _scanProgress = 0;
      _scanResult = "";
      _cancelled = false;
      _attackStarted = false;
      _allResults = "";
    });

    final reportFormat = _exportBoth ? 'both' : _selectedFormat;

    for (int i = 0; i < targets.length; i++) {
      final ip = targets[i];
      final result = await NetworkScanAPI.runScan(ip, reportFormat);
      _allResults += "\nüì° Scan for $ip:\n$result\n";
      setState(() {
        _scanProgress = (i + 1) / targets.length;
      });
    }

    setState(() {
      _scanDone = true;
      _isLoading = false;
      _showAttackPhase = true;
    });

    // Show confirmation dialog first
    final userConfirmed = await PentestUtils.showConfirmationDialog(context);
    if (!userConfirmed) {
      setState(() {
        _showAttackPhase = false;
        _scanResult = "Attack phase cancelled by user.";
      });
      return;
    }

    // Start countdown with cancel/continue logic
    await PentestUtils.startCountdown(
      seconds: 15,
      isCancelled: () => _cancelled,
      onCancelCheck: () {
        setState(() {
          _showAttackPhase = false;
          _scanResult = "Attack cancelled by user.";
        });
      },
      onTick: (remaining) {
        setState(() {
          _countdown = remaining;
        });
      },
      onComplete: () async {
        if (!_attackStarted) {
          _attackStarted = true;
          setState(() => _showAttackPhase = false);
          await CombinedScanAPI.pentestAttack(
              _allResults, true, 'http://127.0.0.1:8888:/start-network-pentest');
          setState(() => _scanResult = "Attack phase completed.");
        }
      },
      isAttackStarted: () => _attackStarted,
      markAttackStarted: () => _attackStarted = true,

    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text(
          "Network Pentest",
          style: GoogleFonts.roboto(fontSize: 25, fontWeight: FontWeight.w600),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Align(
              alignment: Alignment.topCenter,
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(16),
                    child: SizedBox(
                      width: 60,
                      height: 60,
                      child: Image.asset(
                        "assets/3d-shape-glowing-with-bright-holographic-colors.jpg",
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  const SizedBox(width: 15),
                  Text("Kalia", style: GoogleFonts.openSans(fontSize: 30)),
                ],
              ),
            ),
            const SizedBox(height: 20),
            Text("Enter the url of the company's website", style: TextStyle(fontSize: 16)),
            const SizedBox(height: 10),

            ...List.generate(_ipControllers.length, (index) {
              return Padding(
                padding: const EdgeInsets.only(bottom: 12.0),
                child: Column(
                  children: [
                    TextFormField(
                      controller: _ipControllers[index],
                      decoration: InputDecoration(
                        prefixIcon: const Icon(Icons.lan, size: 20, color: Colors.blue),
                        labelText: 'Target IP Address ${index + 1}',
                        labelStyle: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600),
                        border: OutlineInputBorder(borderRadius: BorderRadius.circular(30)),
                      ),
                    ),
                    if (index == _ipControllers.length - 1)
                      Align(
                        alignment: Alignment.centerRight,
                        child: TextButton(
                          onPressed: () {
                            setState(() => _ipControllers.add(TextEditingController()));
                          },
                          child: const Text("‚ûï Add another target IP"),
                        ),
                      ),
                    if (_ipControllers.length > 1)
                      IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () {
                          setState(() => _ipControllers.removeAt(index));
                        },
                      ),
                  ],
                ),
              );
            }),

            const SizedBox(height: 10),
            Center(child: Text("Choose which format you want to receive your report", style: TextStyle(fontSize: 16))),
            const SizedBox(height: 10),

            SwitchListTile(
              value: _exportBoth,
              onChanged: (bool value) {
                setState(() => _exportBoth = value);
              },
              title: Text("Exporter en PDF + Markdown",
                  style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              subtitle: Text("(D√©sactivez pour choisir un seul format)",
                  style: GoogleFonts.openSans(fontSize: 10, fontWeight: FontWeight.w600)),
            ),
            if (!_exportBoth) ...[
              RadioListTile<String>(
                value: 'pdf',
                groupValue: _selectedFormat,
                onChanged: (value) {
                  setState(() => _selectedFormat = value!);
                },
                title: Text("Exporter uniquement en PDF",
                    style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              ),
              RadioListTile<String>(
                value: 'md',
                groupValue: _selectedFormat,
                onChanged: (value) {
                  setState(() => _selectedFormat = value!);
                },
                title: Text("Exporter uniquement en Markdown",
                    style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
              ),
            ],

            const SizedBox(height: 40),
            ElevatedButton(
              onPressed: _isLoading ? null : _startScan,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green.shade600,
                minimumSize: const Size(200, 50),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
              ),
              child: Text("Launch Pentest",
                  style: GoogleFonts.openSans(fontSize: 16, fontWeight: FontWeight.w600)),
            ),
            if (_isLoading) const CircularProgressIndicator(),
            if (!_isLoading && _scanResult.isNotEmpty) ...[
              const Divider(height: 30, thickness: 1.5),
              Text("R√©sultat du scan :", style: GoogleFonts.poppins(fontWeight: FontWeight.bold)),
              const SizedBox(height: 10),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade300),
                  borderRadius: BorderRadius.circular(10),
                  color: Colors.grey.shade100,
                ),
                child: Text(_scanResult, style: GoogleFonts.openSans(fontSize: 14)),
              ),
            ],
            if (_isLoading || !_scanDone) ...[
              const SizedBox(height: 30),
              Text("üîç Vulnerability Scanning... ${(_scanProgress * 100).toInt()}%"),
              LinearProgressIndicator(
                value: _scanProgress,
                minHeight: 8,
                backgroundColor: Colors.grey[300],
                color: Colors.blueAccent,
              ),
            ],
            if (_scanDone && _showAttackPhase) ...[
              const SizedBox(height: 30),
              Text("‚öîÔ∏è Pentest Attack and Exploitation", style: GoogleFonts.poppins(fontSize: 18, fontWeight: FontWeight.bold)),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _cancelled = true;
                        _showAttackPhase = false;
                        _scanResult = "Attack cancelled by user.";
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.redAccent,
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    ),
                    child: Text("Cancel ($_countdown)", style: const TextStyle(color: Colors.white)),
                  ),
                  ElevatedButton(
                    onPressed: () async {
                      setState(() {
                        _showAttackPhase = false;
                        _attackStarted = true;
                      });
                      await CombinedScanAPI.pentestAttack(
                          _allResults, true, 'http://127.0.0.1:8888:/start-network-pentest');
                      setState(() {
                        _scanResult = "Attack phase completed.";
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    ),
                    child: const Text("Continue", style: TextStyle(color: Colors.white)),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }
}
